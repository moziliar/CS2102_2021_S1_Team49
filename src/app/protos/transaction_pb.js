// source: transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
goog.object.extend(proto, user_pb);
var pet_pb = require('./pet_pb.js');
goog.object.extend(proto, pet_pb);
goog.exportSymbol('proto.transaction.ListTnxByUserIDReq', null, global);
goog.exportSymbol('proto.transaction.ListTnxResp', null, global);
goog.exportSymbol('proto.transaction.Review', null, global);
goog.exportSymbol('proto.transaction.Transaction', null, global);
goog.exportSymbol('proto.transaction.TransactionInfo', null, global);
goog.exportSymbol('proto.transaction.TransactionInfo.TransferMethod', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.Transaction.displayName = 'proto.transaction.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.TransactionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.TransactionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.TransactionInfo.displayName = 'proto.transaction.TransactionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.Review = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.Review, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.Review.displayName = 'proto.transaction.Review';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.ListTnxByUserIDReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.ListTnxByUserIDReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.ListTnxByUserIDReq.displayName = 'proto.transaction.ListTnxByUserIDReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.ListTnxResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transaction.ListTnxResp.repeatedFields_, null);
};
goog.inherits(proto.transaction.ListTnxResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.ListTnxResp.displayName = 'proto.transaction.ListTnxResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    tId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    info: (f = msg.getInfo()) && proto.transaction.TransactionInfo.toObject(includeInstance, f),
    review: (f = msg.getReview()) && proto.transaction.Review.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.Transaction}
 */
proto.transaction.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.Transaction;
  return proto.transaction.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.Transaction}
 */
proto.transaction.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTId(value);
      break;
    case 2:
      var value = new proto.transaction.TransactionInfo;
      reader.readMessage(value,proto.transaction.TransactionInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 4:
      var value = new proto.transaction.Review;
      reader.readMessage(value,proto.transaction.Review.deserializeBinaryFromReader);
      msg.setReview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.transaction.TransactionInfo.serializeBinaryToWriter
    );
  }
  f = message.getReview();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.transaction.Review.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 t_id = 1;
 * @return {number}
 */
proto.transaction.Transaction.prototype.getTId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setTId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TransactionInfo info = 2;
 * @return {?proto.transaction.TransactionInfo}
 */
proto.transaction.Transaction.prototype.getInfo = function() {
  return /** @type{?proto.transaction.TransactionInfo} */ (
    jspb.Message.getWrapperField(this, proto.transaction.TransactionInfo, 2));
};


/**
 * @param {?proto.transaction.TransactionInfo|undefined} value
 * @return {!proto.transaction.Transaction} returns this
*/
proto.transaction.Transaction.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Review review = 4;
 * @return {?proto.transaction.Review}
 */
proto.transaction.Transaction.prototype.getReview = function() {
  return /** @type{?proto.transaction.Review} */ (
    jspb.Message.getWrapperField(this, proto.transaction.Review, 4));
};


/**
 * @param {?proto.transaction.Review|undefined} value
 * @return {!proto.transaction.Transaction} returns this
*/
proto.transaction.Transaction.prototype.setReview = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.clearReview = function() {
  return this.setReview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.prototype.hasReview = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.TransactionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.TransactionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.TransactionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.TransactionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && user_pb.User.toObject(includeInstance, f),
    careTaker: (f = msg.getCareTaker()) && user_pb.User.toObject(includeInstance, f),
    pet: (f = msg.getPet()) && pet_pb.Pet.toObject(includeInstance, f),
    location: jspb.Message.getFieldWithDefault(msg, 4, ""),
    startDate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    endDate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    totalPrice: jspb.Message.getFieldWithDefault(msg, 7, 0),
    transferMethod: jspb.Message.getFieldWithDefault(msg, 8, 0),
    useCard: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    creditCard: (f = msg.getCreditCard()) && user_pb.CreditCard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.TransactionInfo}
 */
proto.transaction.TransactionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.TransactionInfo;
  return proto.transaction.TransactionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.TransactionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.TransactionInfo}
 */
proto.transaction.TransactionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setCareTaker(value);
      break;
    case 3:
      var value = new pet_pb.Pet;
      reader.readMessage(value,pet_pb.Pet.deserializeBinaryFromReader);
      msg.setPet(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndDate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalPrice(value);
      break;
    case 8:
      var value = /** @type {!proto.transaction.TransactionInfo.TransferMethod} */ (reader.readEnum());
      msg.setTransferMethod(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseCard(value);
      break;
    case 10:
      var value = new user_pb.CreditCard;
      reader.readMessage(value,user_pb.CreditCard.deserializeBinaryFromReader);
      msg.setCreditCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.TransactionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.TransactionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.TransactionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.TransactionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getCareTaker();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getPet();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pet_pb.Pet.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStartDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEndDate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTotalPrice();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getTransferMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getUseCard();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCreditCard();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      user_pb.CreditCard.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.transaction.TransactionInfo.TransferMethod = {
  PCS_ON_SITE: 0,
  OWNER_DELIVER: 1,
  TAKER_PICKUP: 2
};

/**
 * optional user.User owner = 1;
 * @return {?proto.user.User}
 */
proto.transaction.TransactionInfo.prototype.getOwner = function() {
  return /** @type{?proto.user.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 1));
};


/**
 * @param {?proto.user.User|undefined} value
 * @return {!proto.transaction.TransactionInfo} returns this
*/
proto.transaction.TransactionInfo.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.TransactionInfo.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional user.User care_taker = 2;
 * @return {?proto.user.User}
 */
proto.transaction.TransactionInfo.prototype.getCareTaker = function() {
  return /** @type{?proto.user.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 2));
};


/**
 * @param {?proto.user.User|undefined} value
 * @return {!proto.transaction.TransactionInfo} returns this
*/
proto.transaction.TransactionInfo.prototype.setCareTaker = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.clearCareTaker = function() {
  return this.setCareTaker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.TransactionInfo.prototype.hasCareTaker = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional pet.Pet pet = 3;
 * @return {?proto.pet.Pet}
 */
proto.transaction.TransactionInfo.prototype.getPet = function() {
  return /** @type{?proto.pet.Pet} */ (
    jspb.Message.getWrapperField(this, pet_pb.Pet, 3));
};


/**
 * @param {?proto.pet.Pet|undefined} value
 * @return {!proto.transaction.TransactionInfo} returns this
*/
proto.transaction.TransactionInfo.prototype.setPet = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.clearPet = function() {
  return this.setPet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.TransactionInfo.prototype.hasPet = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string location = 4;
 * @return {string}
 */
proto.transaction.TransactionInfo.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string start_date = 5;
 * @return {string}
 */
proto.transaction.TransactionInfo.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string end_date = 6;
 * @return {string}
 */
proto.transaction.TransactionInfo.prototype.getEndDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.setEndDate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 total_price = 7;
 * @return {number}
 */
proto.transaction.TransactionInfo.prototype.getTotalPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.setTotalPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional TransferMethod transfer_method = 8;
 * @return {!proto.transaction.TransactionInfo.TransferMethod}
 */
proto.transaction.TransactionInfo.prototype.getTransferMethod = function() {
  return /** @type {!proto.transaction.TransactionInfo.TransferMethod} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.transaction.TransactionInfo.TransferMethod} value
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.setTransferMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional bool use_card = 9;
 * @return {boolean}
 */
proto.transaction.TransactionInfo.prototype.getUseCard = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.setUseCard = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional user.CreditCard credit_card = 10;
 * @return {?proto.user.CreditCard}
 */
proto.transaction.TransactionInfo.prototype.getCreditCard = function() {
  return /** @type{?proto.user.CreditCard} */ (
    jspb.Message.getWrapperField(this, user_pb.CreditCard, 10));
};


/**
 * @param {?proto.user.CreditCard|undefined} value
 * @return {!proto.transaction.TransactionInfo} returns this
*/
proto.transaction.TransactionInfo.prototype.setCreditCard = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.TransactionInfo} returns this
 */
proto.transaction.TransactionInfo.prototype.clearCreditCard = function() {
  return this.setCreditCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.TransactionInfo.prototype.hasCreditCard = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.Review.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.Review.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.Review} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Review.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rating: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.Review}
 */
proto.transaction.Review.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.Review;
  return proto.transaction.Review.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.Review} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.Review}
 */
proto.transaction.Review.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRating(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.Review.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.Review.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.Review} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Review.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRating();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.transaction.Review.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Review} returns this
 */
proto.transaction.Review.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 rating = 2;
 * @return {number}
 */
proto.transaction.Review.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.Review} returns this
 */
proto.transaction.Review.prototype.setRating = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.ListTnxByUserIDReq.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.ListTnxByUserIDReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.ListTnxByUserIDReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.ListTnxByUserIDReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.ListTnxByUserIDReq}
 */
proto.transaction.ListTnxByUserIDReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.ListTnxByUserIDReq;
  return proto.transaction.ListTnxByUserIDReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.ListTnxByUserIDReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.ListTnxByUserIDReq}
 */
proto.transaction.ListTnxByUserIDReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwnerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.ListTnxByUserIDReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.ListTnxByUserIDReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.ListTnxByUserIDReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.ListTnxByUserIDReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 owner_id = 1;
 * @return {number}
 */
proto.transaction.ListTnxByUserIDReq.prototype.getOwnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.ListTnxByUserIDReq} returns this
 */
proto.transaction.ListTnxByUserIDReq.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transaction.ListTnxResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.ListTnxResp.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.ListTnxResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.ListTnxResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.ListTnxResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.transaction.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.ListTnxResp}
 */
proto.transaction.ListTnxResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.ListTnxResp;
  return proto.transaction.ListTnxResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.ListTnxResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.ListTnxResp}
 */
proto.transaction.ListTnxResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.transaction.Transaction;
      reader.readMessage(value,proto.transaction.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.ListTnxResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.ListTnxResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.ListTnxResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.ListTnxResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.transaction.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Transaction transactions = 1;
 * @return {!Array<!proto.transaction.Transaction>}
 */
proto.transaction.ListTnxResp.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.transaction.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transaction.Transaction, 1));
};


/**
 * @param {!Array<!proto.transaction.Transaction>} value
 * @return {!proto.transaction.ListTnxResp} returns this
*/
proto.transaction.ListTnxResp.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.transaction.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.transaction.Transaction}
 */
proto.transaction.ListTnxResp.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.transaction.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transaction.ListTnxResp} returns this
 */
proto.transaction.ListTnxResp.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


goog.object.extend(exports, proto.transaction);
